// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pelageia_api.Data;

#nullable disable

namespace pelageia_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DownloadType")
                        .HasColumnType("int");

                    b.Property<int?>("FtpParamsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImapParamsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderFileId")
                        .HasColumnType("int");

                    b.Property<int?>("UrlParamsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderFileId");

                    b.ToTable("DownloadFiles");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.FtpParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DownloaFileId")
                        .HasColumnType("int");

                    b.Property<int>("DownloadFileId")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DownloaFileId")
                        .IsUnique()
                        .HasFilter("[DownloaFileId] IS NOT NULL");

                    b.ToTable("FtpParams");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.ImapParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DownloaFileId")
                        .HasColumnType("int");

                    b.Property<int>("DownloadFileId")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DownloaFileId")
                        .IsUnique()
                        .HasFilter("[DownloaFileId] IS NOT NULL");

                    b.ToTable("ImapParams");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.UrlParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DownloaFileId")
                        .HasColumnType("int");

                    b.Property<int>("DownloadFileId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DownloaFileId")
                        .IsUnique()
                        .HasFilter("[DownloaFileId] IS NOT NULL");

                    b.ToTable("UrlParams");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.ProviderFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Columns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompressionType")
                        .HasColumnType("int");

                    b.Property<bool>("Download")
                        .HasColumnType("bit");

                    b.Property<int?>("DownloadFileId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Separator")
                        .HasColumnType("int");

                    b.Property<string>("UseCols")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderFiles");
                });

            modelBuilder.Entity("pelageia_api.Models.ProviderModels.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("pelageia_api.Models.ProviderModels.ProviderQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("SelectQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhereQuery")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("ProviderQueries");
                });

            modelBuilder.Entity("pelageia_api.Models.SubscriptionModels.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Timeout")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("pelageia_api.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Subscription")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", b =>
                {
                    b.HasOne("pelageia_api.Models.FileModels.ProviderFile", null)
                        .WithMany("DownloadFiles")
                        .HasForeignKey("ProviderFileId");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.FtpParams", b =>
                {
                    b.HasOne("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", "DownloadFile")
                        .WithOne("FtpParams")
                        .HasForeignKey("pelageia_api.Models.FileModels.DownloadFileModels.FtpParams", "DownloaFileId");

                    b.Navigation("DownloadFile");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.ImapParams", b =>
                {
                    b.HasOne("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", "DownloadFile")
                        .WithOne("ImapParams")
                        .HasForeignKey("pelageia_api.Models.FileModels.DownloadFileModels.ImapParams", "DownloaFileId");

                    b.Navigation("DownloadFile");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.UrlParams", b =>
                {
                    b.HasOne("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", "DownloadFile")
                        .WithOne("UrlParams")
                        .HasForeignKey("pelageia_api.Models.FileModels.DownloadFileModels.UrlParams", "DownloaFileId");

                    b.Navigation("DownloadFile");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.ProviderFile", b =>
                {
                    b.HasOne("pelageia_api.Models.ProviderModels.Provider", "Provider")
                        .WithMany("ProviderFiles")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("pelageia_api.Models.ProviderModels.Provider", b =>
                {
                    b.HasOne("pelageia_api.Models.UserModels.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pelageia_api.Models.ProviderModels.ProviderQuery", b =>
                {
                    b.HasOne("pelageia_api.Models.ProviderModels.Provider", "Provider")
                        .WithOne("ProviderQueryId")
                        .HasForeignKey("pelageia_api.Models.ProviderModels.ProviderQuery", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("pelageia_api.Models.SubscriptionModels.Subscription", b =>
                {
                    b.HasOne("pelageia_api.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.DownloadFileModels.DownloadFile", b =>
                {
                    b.Navigation("FtpParams");

                    b.Navigation("ImapParams");

                    b.Navigation("UrlParams");
                });

            modelBuilder.Entity("pelageia_api.Models.FileModels.ProviderFile", b =>
                {
                    b.Navigation("DownloadFiles");
                });

            modelBuilder.Entity("pelageia_api.Models.ProviderModels.Provider", b =>
                {
                    b.Navigation("ProviderFiles");

                    b.Navigation("ProviderQueryId");
                });

            modelBuilder.Entity("pelageia_api.Models.UserModels.User", b =>
                {
                    b.Navigation("Providers");
                });
#pragma warning restore 612, 618
        }
    }
}
